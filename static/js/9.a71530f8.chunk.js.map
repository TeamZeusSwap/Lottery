{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","contexts/Localization/translationsContext.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","variableRegex","getTranslation","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","StyledCakeStats","Row","Heading","CakeStats","totalSupply","useFarms","useTotalSupply","burnedBalance","useBurnedBalance","zeusPrice","circSupply","minus","cakeSupply","marketCap","times","prefix","StyledTotalValueLockedCard","TotalValueLockedCard","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","RainbowLight","keyframes","mediaQueries","lg","CardMidContent","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","maxApr","max","aprText","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","assets","orderBy","slice","join","EarnAssetCard","earn","InPools","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"wPACe,SAASA,EAA2BC,EAAGC,GACpD,IAAIC,EAEJ,GAAsB,qBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQN,KAAOE,EAAK,OAAAK,EAAA,GAA2BP,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEQ,OAAqB,CAC/GN,IAAIF,EAAIE,GACZ,IAAIO,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKT,EAAEQ,OAAe,CACxBK,MAAM,GAED,CACLA,MAAM,EACNC,MAAOd,EAAES,OAGbM,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGP,GAIP,MAAM,IAAIQ,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLV,EAAG,WACDT,EAAKF,EAAEG,OAAOC,aAEhBQ,EAAG,WACD,IAAIU,EAAOpB,EAAGqB,OAEd,OADAH,EAAmBE,EAAKT,KACjBS,GAETP,EAAG,SAAWS,GACZH,GAAS,EACTF,EAAMK,GAERP,EAAG,WACD,IACOG,GAAoC,MAAhBlB,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAImB,EAAQ,MAAMF,K,8ICXXM,EA3Ba,WAC1B,MAAkDC,mBAA4B,IAA9E,mBAAOC,EAAP,KAA0BC,EAA1B,KACQC,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAqBR,OAnBAE,qBAAU,WAcJJ,GAbe,uCAAG,gCAAAK,EAAA,6DACdC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJD,SAOKe,YAAUC,EAAeV,GAP9B,OAOdW,EAPc,OAQdC,EAAUX,IAAYC,KAAI,SAACC,EAAMU,GAAP,mBAAC,eAAsBV,GAAvB,IAA6BW,QAAS,IAAIC,IAAUJ,EAAWE,SAE/FpB,EAAqBmB,GAVD,2CAAH,oDAcjBI,KAED,CAACtB,EAASE,IAENJ,G,iBCJMyB,EA1BQ,WACrB,MAA+B1B,mBAAS,IAAxC,mBAAO2B,EAAP,KAAiBC,EAAjB,KACQzB,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAoBR,OAlBAE,qBAAU,WAaJJ,GAZkB,uCAAG,8BAAAK,EAAA,6DACjBC,EAAQC,IAAYC,KAAI,SAACC,GAAD,MAAW,CACvCC,QAASC,cACTC,KAAM,cACNC,OAAQ,CAACJ,EAAKK,IAAKd,OAJE,SAOLe,YAAUC,EAAeV,GAPpB,OAOjBoB,EAPiB,OASvBD,EAAWC,GATY,2CAAH,oDAapBC,KAED,CAAC3B,EAASE,IAENsB,G,yCCnBHI,EAAQC,IAAOC,IAAV,oDAkCIC,GA9BY,WACzB,IAAQC,EAAMC,cAAND,EACAhC,EAAYC,cAAZD,QAEFkC,EADcX,IACYY,QAAO,SAACC,EAAOC,GAC7C,IAAMC,EAAgB,IAAIjB,IAAUgB,GACpC,OAAIC,EAAcC,GAAG,GACZH,EAEFA,EAAQE,EAAcR,IAAIU,KAAuBC,aACvD,GACGC,EAAgBC,cAChBC,EAAe,IAAIvB,IAAUa,GAAaW,aAAaH,GAAeD,WAE5E,OAAKzC,EASH,eAAC4B,EAAD,WACE,cAACkB,EAAA,EAAD,CAAW7D,MAAOiD,EAAaa,WAAW,QACzCL,EAAcM,GAAG,IAAM,cAACC,EAAA,EAAD,CAAehE,MAAO2D,OAT9C,cAAC,KAAD,CAAMM,MAAM,eAAeC,MAAO,CAAEJ,WAAY,QAAhD,SACGf,EAAE,a,mBCEIoB,GAvBW,WACxB,IAAQpB,EAAMC,cAAND,EACSqB,EAAgBC,aAAgBC,eAAzCnC,QACFsB,EAAgBC,cAChBa,EAAc,IAAInC,YAAUoC,aAAiBJ,IAAcR,aAAaH,GAAeD,WAG7F,OAFoBxC,cAAZD,QAWN,qCACE,cAAC8C,EAAA,EAAD,CAAW7D,MAAOwE,aAAiBJ,GAAcK,SAAU,EAAGC,SAAS,OAAOZ,WAAW,SACxFL,EAAcM,GAAG,GAAK,cAACC,EAAA,EAAD,CAAehE,MAAOuE,IAAkB,0BAT/D,cAAC,KAAD,CAAMN,MAAM,eAAeC,MAAO,CAAEJ,WAAY,QAAhD,SACGf,EAAE,aCVL4B,GAAwB/B,YAAOgC,IAAPhC,CAAH,uKAUrBD,GAAQC,IAAOC,IAAV,oDAILgC,GAAYjC,IAAOkC,IAAV,oDAITC,GAAQnC,IAAOC,IAAV,+DACA,qBAAGmC,MAAkBC,OAAOC,cAIjCC,GAAUvC,IAAOC,IAAV,iDAgEEuC,GA5DW,WACxB,MAAkCxE,oBAAS,GAA3C,mBAAOyE,EAAP,KAAkBC,EAAlB,KACQvE,EAAYC,cAAZD,QACAgC,EAAMC,cAAND,EACFwC,EAAmB5E,IACnB6E,EAAqBC,cACrBC,EAAoBH,EAAiBI,QAAO,SAACC,GAAD,OAAiBA,EAAYzD,QAAQqB,WAAa,KAE9FqC,EAAkBC,sBAAW,sBAAC,gCAAA1E,EAAA,sDAClCkE,GAAa,GADqB,IAGJI,GAHI,gEAGvBK,EAHuB,0BAMxBC,YAAQR,EAAoBO,EAAgBlE,IAAKd,GANzB,wMAWlCuE,GAAa,GAXqB,uEAYjC,CAACvE,EAAS2E,EAAmBF,IAEhC,OACE,cAACb,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASsB,MAAM,KAAKC,GAAG,OAAOjC,MAAM,YAApC,SACGlB,EAAE,qBAEL,cAAC8B,GAAD,CAAWsB,IAAI,mBAAmBC,IAAI,YAAYC,MAAO,GAAIC,OAAQ,KACrE,eAAC,GAAD,WACE,eAACvB,GAAD,WAAQhC,EAAE,mBAAV,OACA,cAAC,GAAD,OAEF,eAAC,GAAD,WACE,eAACgC,GAAD,WAAQhC,EAAE,kBAAV,OACA,cAAC,GAAD,OAEF,cAACoC,GAAD,UACGpE,EACC,cAAC,IAAD,CACEwF,GAAG,cACHC,SAAUd,EAAkBhG,QAAU,GAAK2F,EAC3CoB,QAASZ,EACTQ,MAAM,OAJR,SAMGhB,EACGtC,EAAE,mBACFA,EAAE,wBAAyB,CACzB2D,MAAOhB,EAAkBhG,WAIjC,cAACiH,EAAA,EAAD,CAAcN,MAAM,iB,UCpF1BO,GAA4C,CAChDC,aAAc,GACdC,gBAAiB,cAGNC,GAAsBC,wBAAcJ,ICT3CK,GAAgB,UASTC,GAAiB,SAACL,EAA0BM,EAAuBC,GAC9E,IAAMC,EAAmBR,EAAaS,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBZ,GAAca,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GCNMe,GAdC,WACd,IAAQtB,EAAiBuB,qBAAWrB,IAA5BF,aAER,OAAO,SAACM,EAAuBC,GAC7B,MAAwB,UAApBP,EAAa,GACRO,EAELP,EAAanH,OAAS,EACjBwH,GAAeL,EAAcM,EAAeC,GAE9CA,ICDLiB,GAAkBzF,YAAOgC,IAAPhC,CAAH,+GAOf0F,GAAM1F,IAAOC,IAAV,oJAOF0F,GAAU3F,IAAOC,IAAV,0GAGJ,qBAAGmC,MAAkBC,OAAOC,cAiDvBsD,GA9CG,WAChB,IAAQzF,EAAMC,cAAND,EAGF0F,GAFQC,cACUP,KACJQ,gBACdC,EAAgBC,aAAiBvE,eACjCwE,EAAYpF,cACZqF,EAAaN,EAAcA,EAAYO,MAAMJ,GAAiB,IAAIxG,KAAU,GAC5E6G,EAAazE,aAAiBuE,GAC9BG,EAAYJ,EAAUK,MAAMJ,GAGlC,OACE,cAACV,GAAD,UACE,eAAC,IAAD,WACE,cAACE,GAAD,UACWxF,EAAE,gBAIb,eAACuF,GAAD,WACE,cAAC,KAAD,CAAM5D,SAAS,OAAOT,MAAM,YAA5B,SAAyClB,EAAE,kBAC1C0F,GAAe,cAAC5E,EAAA,EAAD,CAAWa,SAAS,OAAO1E,MAAOwE,aAAiBiE,GAAchE,SAAU,OAE7F,eAAC6D,GAAD,WACE,cAAC,KAAD,CAAM5D,SAAS,OAAOT,MAAM,YAA5B,SAAyClB,EAAE,wBAC1CkG,GAAc,cAACpF,EAAA,EAAD,CAAWa,SAAS,OAAO1E,MAAOiJ,EAAYxE,SAAU,OAEzE,eAAC6D,GAAD,WACE,cAAC,KAAD,CAAM5D,SAAS,OAAOT,MAAM,YAA5B,SAAyClB,EAAE,kBAC3C,cAACc,EAAA,EAAD,CAAWa,SAAS,OAAO1E,MAAOwE,aAAiBoE,GAAgBnE,SAAU,OAE/E,eAAC6D,GAAD,WACA,cAAC,KAAD,CAAM5D,SAAS,OAAOT,MAAM,YAA5B,SAAyClB,EAAE,oBACzC,cAACc,EAAA,EAAD,CAAWa,SAAS,OAAOD,SAAU,EAAGzE,MAAO,QAEjD,eAACsI,GAAD,WACE,cAAC,KAAD,CAAM5D,SAAS,OAAOT,MAAM,YAA5B,SAAyClB,EAAE,gBAC3C,cAACc,EAAA,EAAD,CAAWa,SAAS,OAAOD,SAAU,EAAIzE,MAAOwE,aAAiB0E,GAAYE,OAAO,eCjExFC,GAA6BzG,YAAOgC,IAAPhC,CAAH,sKAkCjB0G,GAxBc,WAC3B,IAAQvG,EAAMC,cAAND,EACFyE,ECLmB,WACzB,MAAwB5G,mBAAmC,MAA3D,mBAAO4G,EAAP,KAAa+B,EAAb,KAmBA,OAjBApI,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAESoI,MAAM,0DAFf,cAERC,EAFQ,gBAGgCA,EAASC,OAHzC,OAGRC,EAHQ,OAOdJ,EAAQI,GAPM,kDASdC,QAAQC,MAAM,wBAAd,MATc,0DAAH,oDAafC,KACC,CAACP,IAEG/B,EDfMuC,GACPC,EAAMxC,EAAOA,EAAKwC,IAAIC,eAAe,QAAS,CAAEC,sBAAuB,IAAO,KAEpF,OACE,cAACb,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASpD,MAAM,KAAKC,GAAG,MAAMjC,MAAM,YAAnC,SACGlB,EAAE,8BAEJyE,EACC,qCACE,cAAC,IAAD,CAASvB,MAAM,KAAf,oBAAyB+D,KACzB,cAAC,KAAD,CAAM/F,MAAM,aAAZ,SAA0BlB,EAAE,qCAG9B,cAAC,KAAD,CAAUuD,OAAQ,W,4DErBtB6D,GAAeC,YAAH,6KAYZzF,GAAwB/B,YAAOgC,IAAPhC,CAAH,kmBAmBZuH,IAIX,qBAAGnF,MAAkBqF,aAAaC,MAUhCC,GAAiB3H,YAAO2F,KAASiC,MAAM,CAAEvE,MAAO,MAA/BrD,CAAH,kDAsEL6H,GAnEK,WAClB,MAAoD7J,oBAAS,GAA7D,mBAAO8J,EAAP,KAA2BC,EAA3B,KACQ5H,EAAMC,cAAND,EACM6H,EAAYlC,cAAlBlB,KACFqD,EAAYnH,cACZoH,EAAWC,eAGjB5J,qBAAU,YACW,uCAAG,sBAAAC,EAAA,+EAEZ0J,EAASE,aAA0BC,KAAiB1J,KAAI,SAAC2J,GAAD,OAAqBA,EAAgBrJ,SAFjF,uBAIlB8I,GAAsB,GAJJ,uEAAH,qDAQnBQ,KACC,CAACL,EAAUH,IAEd,IAAMS,EAAaC,mBAAQ,WACzB,GAAIR,EAAU9G,GAAG,GAAI,CACnB,IAAMuH,EAAOV,EAAQrJ,KAAI,SAACC,GAExB,GAAiB,IAAbA,EAAKK,KAAiC,OAApBL,EAAK+J,YAAuB/J,EAAKgK,qBAAuBhK,EAAKiK,WAAWC,UAAW,CACvG,IAAMC,EAAiB,IAAIvJ,IAAUZ,EAAKgK,qBAAqBrC,MAAM3H,EAAKiK,WAAWC,WACrF,OAAOE,aAAW,IAAIxJ,IAAUZ,EAAKqK,YAAahB,EAAWc,GAE/D,OAAO,QAGHG,EAASC,KAAIT,GACnB,cAAOQ,QAAP,IAAOA,OAAP,EAAOA,EAAQ7B,eAAe,QAAS,CAAEC,sBAAuB,IAElE,OAAO,OACN,CAACW,EAAWD,IAEToB,EAAUZ,GAAc,IAE9B,EADoBrI,EAAE,uCAAwC,CAAEqI,WAAYY,IACpChE,MAAMgE,GAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACE,cAAC,GAAD,UACE,cAAC,KAAD,CAASC,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS9F,GAAG,eAAvD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAStC,MAAM,YAAYgC,MAAM,KAAjC,SACGgG,IAEH,cAAC1B,GAAD,CAAgBtG,MAAM,OAAtB,SACGmH,IAAeV,EAAf,UACIU,EADJ,KAGC,cAAC,KAAD,CAAUkB,UAAU,QAAQC,QAAQ,OAAOjG,OAAO,WAGtD,eAAC,IAAD,CAAMkG,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvI,MAAM,YAAYgC,MAAM,KAAjC,SACGiG,IAEH,cAAC,IAAD,CAAkBO,GAAI,GAAIxI,MAAM,yB,8BC9GtCkG,GAAeC,YAAH,6KAYZzF,GAAwB/B,YAAOgC,IAAPhC,CAAH,8lBAmBZuH,IAGX,qBAAGnF,MAAkBqF,aAAaC,MAUhCC,GAAiB3H,YAAO2F,KAASiC,MAAM,CAAEvE,MAAO,MAA/BrD,CAAH,kDAId8J,GAAqBC,KAAMhH,QAAO,SAACiH,GAAD,OAAWA,EAAKC,aAAeD,EAAKE,aAAaC,OAAOnF,SAAS,WAGnGoF,GAAS,CAFaC,KAAQP,GAAoB,CAAC,YAAa,OAAQ,CAAC,OAAQ,SAASQ,MAAM,EAAG,GAE7E3L,KAAI,SAACqL,GAAD,OAAUA,EAAKE,aAAaC,WAASI,KAAK,MA2B3DC,GAzBO,WACpB,IAEA,GADkBrK,EADJC,cAAND,GACY,yBAA0B,CAAEiK,YACdhF,MAAMgF,IAAxC,mBAAOK,EAAP,KAAaC,EAAb,KAEA,OACE,cAAC,GAAD,UACE,cAAC,KAAD,CAASnB,OAAK,EAACC,gBAAgB,SAASC,GAAG,SAAS9F,GAAG,WAAvD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAStC,MAAM,YAAYgC,MAAM,KAAjC,SACGoH,IAEH,cAAC,GAAD,CAAgBpJ,MAAM,OAAtB,SAA8B+I,KAC9B,eAAC,IAAD,CAAMR,eAAe,gBAArB,UACE,cAAC,IAAD,CAASvI,MAAM,YAAYgC,MAAM,KAAjC,SACGqH,IAEH,cAAC,IAAD,CAAkBb,GAAI,GAAIxI,MAAM,uBClEtCsJ,GAAO3K,IAAOC,IAAV,yYAYN,qBAAGmC,MAAkBqF,aAAaC,MAOhCkD,GAAQ5K,YAAO6K,IAAP7K,CAAH,kXAWP,qBAAGoC,MAAkBqF,aAAaqD,MAMlC,qBAAG1I,MAAkBqF,aAAaC,MAUhCqD,GAAW/K,YAAO6K,IAAP7K,CAAH,iUASV,qBAAGoC,MAAkBqF,aAAaqD,MAMlC,qBAAG1I,MAAkBqF,aAAaC,MAoCvBsD,GA1BQ,WACrB,IAAQ7K,EAAMC,cAAND,EAER,OACE,eAAC8K,EAAA,EAAD,WACE,eAACN,GAAD,WACE,cAAC,IAAD,CAASO,GAAG,KAAK7H,MAAM,KAAKC,GAAG,OAAOjC,MAAM,YAA5C,SACGlB,EAAE,cAEL,cAAC,KAAD,UAAOA,EAAE,+CAEX,gCACE,eAACyK,GAAD,WACE,cAACO,GAAD,IACA,cAAC,GAAD,OAEF,eAACJ,GAAD,WACA,cAAC,GAAD,IACE,cAAC,GAAD,IACA,cAAC,GAAD,e,2ICxFEK,E,4HAAAA,K,0BAAAA,E,kBAAAA,E,iBAAAA,M,KAMZ,IAmCarF,EAAiB,WAC5B,IAAQsF,EAAgB/M,cAAhB+M,YACR,EAAsCrN,qBAAtC,mBAAO6H,EAAP,KAAoByF,EAApB,KAYA,OAVA/M,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQ+M,EAAeC,cADvB,SAEuBD,EAAaE,QAAQ5F,cAAc6F,OAF1D,OAEQC,EAFR,OAGEL,EAAe,IAAI9L,IAAUmM,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACP,IAEGxF,GAGII,EAAmB,SAAC4F,GAC/B,MAA8B7N,mBAAS8N,KAAvC,mBAAOvM,EAAP,KAAgBK,EAAhB,KACQyL,EAAgB/M,cAAhB+M,YACFU,EAAOC,cAYb,OAVAzN,qBAAU,YACU,uCAAG,8BAAAC,EAAA,6DACbyN,EAAWC,YAAiBL,EAAcE,GAD7B,SAEDE,EAASR,QAAQU,UAAU,8CAA8CT,OAFxE,OAEb7L,EAFa,OAGnBD,EAAW,IAAIJ,IAAUK,IAHN,2CAAH,qDAMlBuM,KACC,CAACL,EAAMF,EAAcR,IAEjB9L,GAGI8M,EAAmB,WAC9B,MAA8BrO,mBAAS8N,KAAvC,mBAAOvM,EAAP,KAAgBK,EAAhB,KACQzB,EAAYC,cAAZD,QACR,EAAwCmO,cAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eACfT,EAAOC,cAab,OAXAzN,qBAAU,WAMJJ,GALc,uCAAG,4BAAAK,EAAA,sEACSuN,EAAKU,IAAIC,WAAWvO,GAD7B,OACbwO,EADa,OAEnB/M,EAAW,IAAIJ,IAAUmN,IAFN,2CAAH,oDAMhBP,KAED,CAACjO,EAAS4N,EAAMQ,EAAa3M,IAEzB,CAAEL,UAASqN,QAASJ,IAId/K,IA3FS,SAACoK,GACvB,IAAQgB,EAAiCzB,EAAjCyB,YAAaC,EAAoB1B,EAApB0B,QAASC,EAAW3B,EAAX2B,OAC9B,EAAwC/O,mBAA+B,CACrEuB,QAASuM,IACTkB,YAAaH,IAFf,mBAAOI,EAAP,KAAqBC,EAArB,KAIMnB,EAAOC,cACL7N,EAAYC,cAAZD,QACAE,EAAgBC,cAAhBD,YAsBR,OApBAE,qBAAU,WAeJJ,GAdc,uCAAG,8BAAAK,EAAA,6DACbyN,EAAWC,YAAiBL,EAAcE,GAD7B,kBAGCE,EAASR,QAAQU,UAAUhO,GAASuN,OAHrC,OAGX7L,EAHW,OAIjBqN,EAAgB,CAAE3N,QAAS,IAAIC,IAAUK,GAAMmN,YAAaF,IAJ3C,gDAMjB9F,QAAQC,MAAR,MACAiG,GAAgB,SAACC,GAAD,mBAAC,eACZA,GADW,IAEdH,YAAaD,OATE,yDAAH,oDAehBX,KAED,CAACjO,EAAS0N,EAAcE,EAAM1N,EAAayO,EAASC,IAEhDE,I,iCCnDT,kCA+CehM,IAjC6B,SAAC,GAQtC,IAPL7D,EAOI,EAPJA,MACAyE,EAMI,EANJA,SAMI,IALJC,gBAKI,MALO,OAKP,MAJJZ,kBAII,MAJS,IAIT,MAHJsF,cAGI,MAHK,GAGL,MAFJ4G,YAEI,aADJ/L,aACI,MADI,OACJ,EACJ,EAA4BgM,qBAAW,CACrCC,MAAO,EACPC,IAAKnQ,EACLoQ,SAAU,EACVC,UAAW,IACX5L,cAEe6L,IAAb7L,EAAyBA,EAAWzE,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEuQ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUXC,EAAcC,iBAAOF,GAM3B,OAJArP,qBAAU,WACRsP,EAAYE,QAAQ3Q,KACnB,CAACA,EAAOyQ,IAGT,eAAC,KAAD,CAAMT,KAAMA,EAAMtL,SAAUA,EAAUR,MAAO,CAAEJ,cAAcG,MAAOA,EAApE,UACGmF,EACAmH,O,oECjCQvM,IANiC,SAAC4M,GAC/C,OACE,cAAC,IAAD,aAAWlM,SAAS,OAAOZ,WAAW,MAAMG,MAAM,aAAamF,OAAO,KAAK4G,MAAM,EAAOvL,SAAU,GAAOmM,M,oBCL7G,IAAIC,EAAeC,EAAQ,KACvBC,EAASD,EAAQ,KACjBE,EAAWF,EAAQ,KA0BvBG,EAAOC,QANP,SAAaC,GACX,OAAQA,GAASA,EAAMzR,OACnBmR,EAAaM,EAAOH,EAAUD,QAC9BT","file":"static/js/9.a71530f8.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n background-position: center;\nbackground-repeat: no-repeat;\nbackground-size: cover;\n  min-height: 376px;\n   opacity: 0.9;\n    ) ;\n\n `\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 10px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 17px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, account)\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"15px\" color=\"secondary\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/zeus.svg\" alt=\"zeus logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('Zeus to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('Zeus in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting Zeus')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localization/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localization/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import React from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { useGetStats } from 'hooks/api'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport {useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  opacity: 0.9;\n  max-height: 100%;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n const Heading = styled.div`\n font-size: 40px;\n margin-bottom: 20px;\n color: ${({ theme }) => theme.colors.textSubtle};\n font-weight: 900;\n  `\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const farms = useFarms();\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const zeusPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = zeusPrice.times(circSupply);\n \n \n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading>\n                  {t('Zeus Stats')}\n\n        </Heading>\n       \n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"17px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"17px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('Total Burned')}</Text>\n          <CardValue fontSize=\"17px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n        <Text fontSize=\"17px\" color='secondary'>{t('New ZEUS/block')}</Text>\n          <CardValue fontSize=\"17px\" decimals={0} value={0.8} />\n        </Row>\n        <Row>\n          <Text fontSize=\"17px\" color='secondary'>{t('Market Cap')}</Text>\n          <CardValue fontSize=\"17px\" decimals={0}  value={getBalanceNumber(marketCap)} prefix=\"$\" />\n        </Row>\n    \n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items:  center;\n  flex: 1;\n  opacity: 0.9;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  height: 100%;\n      `\n  \nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n \n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"0px\" color=\"secondary\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Zeus Pool')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_zeusswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        \n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground: linear-gradient(\n  45deg,\n  rgb(0,0,0) 0%,\n  rgb(0,0,0) 10%,\n  rgb(0, 16, 36)20%,\n  rgb(0, 21, 46) 30%,\n  rgb(0, 32, 71) 40%,\n  rgb(0, 53, 117) 50%,\n  rgb(0, 32, 71)60%,\n  rgb(0, 21, 46) 70%,\n  rgb(0, 16, 36) 80%,\n  rgb(0,0,0) 90%,\n  rgb(0,0,0) 100%);\n  );\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 2.5s linear infinite;\n  border-radius: 25px;\n  opacity: 0.90;\n  \n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    fetchFarmData()\n  }, [dispatch, setIsFetchingFarmData])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"secondary\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"text\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"secondary\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"secondary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 100%;\n\t}\n\t50% {\n\t\tbackground-position: 0% 0%;\n\t}\n\t100% {\n\t\tbackground-position: 100% 0%;\n\t}\n`\n\nconst StyledFarmStakingCard = styled(Card)`\nbackground: linear-gradient(\n  45deg,\n  rgb(0,0,0) 0%,\n  rgb(0,0,0) 10%,\n  rgb(0, 16, 36)20%,\n  rgb(0, 21, 46) 30%,\n  rgb(0, 32, 71) 40%,\n  rgb(0, 53, 117) 50%,\n  rgb(0, 32, 71)60%,\n  rgb(0, 21, 46) 70%,\n  rgb(0, 16, 36) 80%,\n  rgb(0,0,0) 90%,\n  rgb(0,0,0) 100%);\n  );\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  background-size: 500% 500%;\n  animation: ${RainbowLight} 2.5s linear infinite;\n  border-radius: 25px;\n  opacity: 0.90;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = [latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"secondary\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"text\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"secondary\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n   background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n     background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('ZeusSwap')}\n        </Heading>\n        <Text>{t('The #1 AMM and yield farm in Slovakia.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <CakeStats />\n         </Cards>\n        <CTACards>\n        <TotalValueLockedCard />\n          <EarnAPRCard />\n          <EarnAssetCard />\n         </CTACards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\n\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}